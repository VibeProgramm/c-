//Автор: Мурзин Алексей
//операторы new delete
#include <std_lib_facilities.h>
void Primer_delete()
{
	int *p_var = nullptr;  // объявление нового указателя
	p_var = new int;       // память динамически выделяется

						   /* .......
						   остальной код
						   ........*/

	delete p_var;          // память освобождается
	p_var = nullptr;       // указатель заменяется на нуль-указатель


}

void Primer_massiv_delete()
{

	//Массивы, созданные(выделенные) при помощи new[], аналогичным образом могут быть
	//уничтожены(освобождены) при помощи delete[]:

	int size = 10;
	int *p_var = nullptr;  // объявление нового указателя
	p_var = new int[size];// память динамически выделяется

						  /* .......
						  остальной код
						  ........*/

	delete[] p_var;       // память освобождается
	p_var = nullptr;       // указатель заменяется на нуль-указатель
}
int main()
{
	setlocale(LC_ALL, "Russian");

	//1 вариант

	int *ptr; //создаем указатель
	ptr = new int; //выделяемм под указатель оперативную память
	*ptr = 3; //инициализируем *ptr значение 3, без оператора new эта операция неполучится

	cout << *ptr << endl; //выводим значения *ptr

	//2 вариант

	int *ptr2 = new int(3); //аналогично 3 первым строкам

	cout << *ptr2 << endl;

	/////////////////////////////////

	//создаем массив N-го размера

	cout << "Введите рзамер массива: ";
	int n; cin >> n;
	int *ptr_n = new int[n];

	cout << "Введите массив \n";
	for (int  i = 0; i < n; i++)
	{
		cout << i + 1 << " элемент массива: ";
		cin >> ptr_n[i];
		cout << endl;
	}
	
	system("cls");
	cout << "Исходный массив" << endl;
	/*for (int  i = 0; i < n; i++)
	{
		cout << i+1 << " Элемент массива = "  << ptr_n[i] << endl;
	}*/
	//удаляем элементы масива
	delete ptr;
	delete ptr2;
	delete[] ptr_n;
	/////////////////////////////////////////////
	
	


	_getch();
	return 0;
}